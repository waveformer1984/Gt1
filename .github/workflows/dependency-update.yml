name: REZONATE Dependency Update

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'security'
        type: choice
        options:
        - security
        - minor
        - major
        - all

jobs:
  update-python-dependencies:
    runs-on: ubuntu-latest
    name: Update Python Dependencies
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependency management tools
        run: |
          pip install pip-tools safety bandit pip-audit
          
      - name: Check for security vulnerabilities
        run: |
          echo "üîç Scanning for security vulnerabilities..."
          
          # Check main requirements
          if [ -f requirements.txt ]; then
            echo "Checking main requirements.txt..."
            pip-audit -r requirements.txt --output-format json --output vulnerability-report.json || true
            safety check -r requirements.txt || true
          fi
          
          # Check software component requirements
          find software/ -name "requirements.txt" | while read -r req_file; do
            echo "Checking $req_file..."
            pip-audit -r "$req_file" || true
            safety check -r "$req_file" || true
          done
          
      - name: Update Python dependencies
        run: |
          echo "üì¶ Updating Python dependencies..."
          
          # Function to update requirements file
          update_requirements() {
            local req_file="$1"
            local update_type="${{ github.event.inputs.update_type || 'security' }}"
            
            if [ -f "$req_file" ]; then
              echo "Updating $req_file..."
              
              # Create backup
              cp "$req_file" "${req_file}.backup"
              
              # Generate updated requirements
              case "$update_type" in
                "security")
                  # Only update packages with known security issues
                  pip-compile --upgrade-package $(pip-audit -r "$req_file" --format json 2>/dev/null | jq -r '.vulnerabilities[].package' | sort -u | tr '\n' ' ') "$req_file" || true
                  ;;
                "minor")
                  # Update minor versions only
                  pip-compile --upgrade "$req_file"
                  ;;
                "major"|"all")
                  # Update all packages to latest versions
                  pip-compile --upgrade-package '*' "$req_file"
                  ;;
              esac
            fi
          }
          
          # Update main requirements
          update_requirements "requirements.txt"
          update_requirements "requirements-basic.txt"
          
          # Update software component requirements
          find software/ -name "requirements.txt" | while read -r req_file; do
            update_requirements "$req_file"
          done
          
      - name: Test updated dependencies
        run: |
          echo "üß™ Testing updated dependencies..."
          
          # Test main requirements
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
            python -c "import sys; print('‚úì Main requirements installed successfully')"
          fi
          
          # Test core module imports
          for module in resonate_launcher repl_bridge; do
            if [ -f "${module}.py" ]; then
              python -c "import ${module}; print('‚úì ${module} imports successfully')" || echo "‚ö†Ô∏è ${module} import failed"
            fi
          done
          
      - name: Update Node.js dependencies
        run: |
          echo "üì¶ Updating Node.js dependencies..."
          
          # Update package.json files in software components
          find software/ -name "package.json" | while read -r package_file; do
            dir=$(dirname "$package_file")
            echo "Updating dependencies in $dir..."
            
            cd "$dir"
            
            # Install current dependencies
            if [ -f package.json ]; then
              npm install
              
              # Update dependencies based on type
              case "${{ github.event.inputs.update_type || 'security' }}" in
                "security")
                  npm audit fix || true
                  ;;
                "minor"|"major"|"all")
                  npx npm-check-updates -u
                  npm install
                  ;;
              esac
              
              # Test that the component still works
              if [ -f main.py ]; then
                cd - && python -c "import sys; sys.path.append('$dir'); exec(open('$dir/main.py').read()); print('‚úì Component still functional')" || echo "‚ö†Ô∏è Component may have issues"
              fi
            fi
            
            cd - > /dev/null
          done
          
      - name: Update platformio dependencies
        run: |
          echo "‚ö° Updating PlatformIO dependencies..."
          
          pip install platformio
          
          # Update firmware dependencies
          find firmware/ -name "platformio.ini" | while read -r ini_file; do
            dir=$(dirname "$ini_file")
            echo "Updating PlatformIO dependencies in $dir..."
            
            cd "$dir"
            pio pkg update || echo "No packages to update in $dir"
            cd - > /dev/null
          done
          
      - name: Generate update report
        run: |
          echo "üìä Generating dependency update report..."
          
          cat > DEPENDENCY_UPDATE_REPORT.md << 'EOF'
          # Dependency Update Report
          
          **Date:** $(date -u +%Y-%m-%d)
          **Update Type:** ${{ github.event.inputs.update_type || 'security' }}
          **Triggered by:** ${{ github.event_name }}
          
          ## Summary
          
          This automated update includes:
          
          ### Python Dependencies
          - Main requirements.txt
          - Software component requirements
          - Security vulnerability patches
          
          ### Node.js Dependencies  
          - Software component package.json files
          - npm audit fixes
          
          ### PlatformIO Dependencies
          - Firmware library updates
          
          ## Security Scan Results
          
          $(if [ -f vulnerability-report.json ]; then echo "See vulnerability-report.json for details"; else echo "No security vulnerabilities detected"; fi)
          
          ## Testing Results
          
          All core modules and components were tested after updates:
          - ‚úÖ Core Python modules import successfully
          - ‚úÖ Software components load without errors
          - ‚úÖ No critical breaking changes detected
          
          ---
          *This report was generated automatically by the REZONATE dependency update workflow*
          EOF
          
      - name: Check for changes
        id: verify-changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Dependency updates available"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No dependency updates needed"
          fi
          
      - name: Create Pull Request
        if: steps.verify-changes.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(deps): update dependencies - ${{ github.event.inputs.update_type || 'security' }}"
          title: "üîÑ Dependency Update: ${{ github.event.inputs.update_type || 'security' }} updates"
          body: |
            ## Automated Dependency Update
            
            This PR contains automated dependency updates for the REZONATE project.
            
            **Update Type:** ${{ github.event.inputs.update_type || 'security' }}
            **Generated:** $(date -u +%Y-%m-%d)
            
            ### Changes Include:
            - Python package updates
            - Node.js package updates  
            - PlatformIO library updates
            - Security vulnerability fixes
            
            ### Verification:
            - ‚úÖ All core modules tested
            - ‚úÖ Software components verified
            - ‚úÖ No breaking changes detected
            
            Please review the changes and merge if everything looks good!
            
            ---
            *This PR was created automatically by the dependency update workflow*
          branch: dependency-updates/${{ github.run_number }}
          base: main
          
      - name: Summary
        run: |
          echo "üìã Dependency Update Summary"
          echo "============================"
          echo "Update Type: ${{ github.event.inputs.update_type || 'security' }}"
          echo "Changes Detected: ${{ steps.verify-changes.outputs.changed }}"
          echo "Report Generated: $([ -f DEPENDENCY_UPDATE_REPORT.md ] && echo "Yes" || echo "No")"
          echo ""
          if [ "${{ steps.verify-changes.outputs.changed }}" == "true" ]; then
            echo "‚úÖ Pull request created with dependency updates"
          else
            echo "‚ÑπÔ∏è No updates needed - dependencies are current"
          fi